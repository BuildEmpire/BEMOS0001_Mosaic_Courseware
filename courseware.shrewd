namespace shrewd BuildEmpire.Mosaic.Courseware
namespace js BuildEmpire.Mosaic.Courseware
namespace php BuildEmpire\Mosaic\Courseware

/*
This allows the product to define a mode and thus behave
differently in said mode. This value may also be transferred to an
external service, who may also act differently dependant on the mode set.
*/
enum Mode {
    SCREEN_EDITOR   = 1,
    SCREEN_DISPLAY  = 2
}

/*
This allows the product to declare a context type when returning
contextual data to the external service.
*/
enum Context {
    GENERAL         = 1,
    POSITION        = 2
}

struct Translation {
    1:  optional    string-id               id,
    2:              boolean                 base = false,
    3:              string                  name,
    4:              string                  value
}

struct LearningPath {
    1:  optional    string-id               id,
    2:              boolean                 base = false,
    3:              string                  name
}



enum ScalingMode {
    NONE            = 1,
    FREE            = 2,
    RATIO           = 3,
    XAXIS           = 4,
    YAXIS           = 5
}

struct ComponentMetrics {
    1:  optional    float                   xPercent,
    2:  optional    float                   yPercent,
    3:  optional    float                   widthPercent,
    4:  optional    float                   heightPercent,
    5:  optional    integer                 tabIndex,
    6:  optional    integer                 zIndex
}

struct Component {
    1:              string                  name,
    2:              string                  title,
    3:              integer                 active = 1
}

struct ComponentInstance {
    1:              string-id               id,
    2:              string                  alias,
    3:              string                  name,
    4:  optional    map                     data,
    5:  optional    ComponentMetrics        metrics,
    6:  optional    ScalingMode             scale
}

struct ColumnRowMetrics {
    1:  optional    float                   widthPercent,
    2:  optional    float                   heightPercent
}

struct Column {
    1:              string-id               id,
    2:  optional    list<ComponentInstance> components,
    3:  optional    ColumnRowMetrics        metrics
}

struct Row {
    1:              string-id               id,
    2:  optional    list<Column>            columns,
    3:  optional    ColumnRowMetrics        metrics
}

struct Template {
    1:              string                  name,
    2:              list<Row>               rows
}

enum LearningPathFulfilmentType {
    NONE        = 1,
    CHILDREN    = 2,
    ALL         = 3
}



enum DragMode {
    FREE    = 1,
    COLUMNS = 2,
    ALL     = 3
}


struct DataRows {
    1:              boolean                 allow       = true,
    2:              boolean                 resizable   = true,
    3:              integer                 initial     = 1,
    4:              integer                 min         = 0,
    5:              integer                 max         = 20
}

struct DataColumns {
    1:              boolean                 allow       = true,
    2:              boolean                 resizable   = true,
    3:              integer                 initial     = 1,
    4:              integer                 min         = 0,
    5:              integer                 max         = 10
}

struct DataCanvas {
    1:              integer                 width           = 800,
    2:              integer                 height          = 600,
    3               integer                 leftPos         = 0,
    4               integer                 topPos          = 0,
    5:              boolean                 placeInColumns  = true,
    6:              boolean                 restrictWidth   = true,
    7:              boolean                 restrictHeight  = false
}

struct DataGrid {
    1:              integer                 x = 20,
    2:              integer                 y = 20
}


struct ConfigurationData {
    1:              string-id               id,
    2:              string                  name,

    3:  optional    list<Translation>       translations,
    4:  optional    list<LearningPath>      learningPaths,
    5:  optional    list<Component>         components,

    6:              DragMode                dragMode,

    7:              DataRows                rows,
    8:              DataColumns             columns,
    9:              DataGrid                grid,

    10:             DataCanvas              canvas,
    11:             integer                 screenWidth     = 800,
    12:             integer                 screenHeight    = 600,

    13:             string                  language = "en",
    14:             boolean                 valid = false
}





/*
Forms
*/
enum EditableFormFieldType {
    TEXT            = 1,
    PASSWORD        = 2,
    TEXTAREA        = 3,
    HTML            = 4,
    SELECT          = 5,
    CHECKBOX        = 6,
    RADIO           = 7,
    RANGE           = 8
}

struct EditableFormFieldHtml {
    1:              list                    cssPath,
    2:              list                    styleFormats,
    3: optional     integer                 rows,
    4: optional     map<string,string>      cssAttributes
}

struct EditableFormFieldSelect {
    1:              map<string,string>      options
}

struct EditableFormFieldRange {
    1:              integer                 min,
    2:              integer                 max,
    3:              integer                 step
}

struct EditableFormFieldText {
    1: optional     integer                 rows
}

struct EditableFormField {
    1:              EditableFormFieldType   type,
    2:              string                  id,
    3:              string                  name,
    4:              string                  title,
    5:              boolean                 required,
    6: optional     mixed                   value,
    7: optional     struct                  data
}

struct EditableFormGroup {
    1:              string                  name,
    2:              list<EditableFormField> fields
}

struct EditableForm {
    1:              string                  name,
    2:              list<EditableFormGroup> groups
}






/*
Specific relationships stored within the screen data
*/
struct Relationship {
    1:              string                  id,
    2:              string                  source,
    3:              mixed                   event,
    4:              string                  target,
    5:              mixed                   action,
    6:  optional    mixed                   data
}




/*
Valid relationship definitions (provided by Engine / Components, not stored in Shrewd)
*/
struct ValidRelationshipEvent {
    1:              string                  context,
    2:              string                  event,
    3:              string                  key,
    4:              string                  string,
    5:  optional    mixed                   data
}

struct ValidRelationshipAction {
    1:              string                  context,
    2:              string                  action,
    3:              string                  key,
    4:              string                  string,
    5:  optional    list<EditableFormField> fields
}

struct RelationshipCollection {
    1:  optional    list<ValidRelationshipEvent>    events,
    2:  optional    list<ValidRelationshipAction>   actions
}

struct RelationshipComponentContainer {
    1:  optional    string                          name,
    2:  optional    string                          selector,
    3:  optional    list<ValidRelationshipAction>   actions,
    4:  optional    list<ValidRelationshipEvent>    events,
    5:  optional    list<RelationshipCollection>    items
}

struct RelationshipContainer {
    1:  optional    RelationshipCollection                          engine,
    2:  optional    map<string-id,RelationshipComponentContainer>   components
}





struct ScreenData {
    1:  optional    list<Row>               rows,
    2:  optional    list<ComponentInstance> freeComponents,
    3:  optional    list<Relationship>      relationships
}

enum StructureItemType {
    PROJECT = 1,
    FOLDER  = 2,
    SCREEN  = 3
}

struct StructureItem {
    1:              string-id                           id,
    2:              string-id                           alias,
    3:              StructureItemType                   type,
    4:              string                              title,
    5:              boolean                             populated,
    6:  optional    list<StructureItem>                 children,
    7:  optional    map<string-id,StructureItemType>    learningPathIds,
    8:  optional    ScreenData                          screenData
}


service ConnectorInbound {

    /**
    Ready
    When the external service has received the inbound service
    successfully, it may let the inbound service know by calling Ready().
    It will also pass an outbound service for which the courseware can
    communicate to the external service with.
    The inbound service is achieved by the declaration of a variable named
    InboundService on the root of the javascript page, which must be defined
    before page load completion.
    */
    void    Ready(
        1:   native-js-Object     OutboundService
    ),

    /**
    SetMode
    Set the mode that the product is operating in.
    This enables the Engine to display the screen with the desired UI
    */
    boolean  SetMode(
        1:  Mode     mode
    ),

    /**
    SetScale
    Set the scale decimal, if required.
    1 = No Scale, 0.5 = 50%, 1.5 = 150%.
    */
    boolean  SetScale(
        1:   float    scale
    ),

    /**
    GetScale
    Get the scale decimal.
    */
    float    GetScale(
    ),

    /**
    IsTransformationApplied
    Whether set transformation is applied to the rendered screen by the engine
    */
    boolean  IsTransformationApplied(
    ),

    /**
    SetTransformation
    Set the transformation decimal, if required.
    1 = No Scale, 0.5 = 50%, 1.5 = 150%.
    */
    boolean  SetTransformation(
        1:   float    transformation
    ),

    /**
    GetTransformation
    Get the transformation decimal.
    */
    float    GetTransformation(
    ),

    /**
    SetConfigurationData
    Set the configuration data object for the courseware.
    This must be done before a Draw() call.
    */
    void    SetConfigurationData(
        1:   ConfigurationData     configurationData
    ),

    /**
    GetConfigurationData
    Get the configuration data object for the courseware.
    */
    ConfigurationData    GetConfigurationData(
    ),

    /**
    SetScreenData
    This returns a jQuery.Deferred promise object, which will be resolved
    on load of all the component contained within the screen data.
    When the call is resolved, you may call Draw().
    */
    void SetScreenData(
        1:   ScreenData     screenData
    ),

    /**
    GetScreenData
    Retrieve the current screen data.
    This may be after an amendment has been made by the course editor.
    */
    ScreenData    GetScreenData(),

    /**
    Draw
    Draw the screen, using the configuration and screen data set.
    This may be called numerous times per load.
    */
    void    Draw(),

    /**
    AddColumn
    Add a column to the current template.
    This may be within the template editor, or to the current screen template.
    This may or may not be supported by the editor.
    No re-draw is required.
    The column id will be returned.
    */
    void    AddColumn(
    ),

    /**
    AddComponent
    Add a component of the component name type to the screen.
    This may or may not be supported by the editor.
    No re-draw is required.
    The component id will be returned.
    */
    void    AddComponent(
        1:   string     componentName
    ),

    /**
    HighlightColumn
    Highlight the column with the given id.
    This may be within the template editor, or to the current screen template.
    This may or may not be supported by the editor.
    */
    void    HighlightColumn(
        1:  string      id
    ),

    /**
    UnhighlightColumn
    Unhighlight the column with the given id.
    This may be within the template editor, or to the current screen template.
    This may or may not be supported by the editor.
    */
    void    UnhighlightColumn(
        1:  string      id
    ),

    /**
    HighlightComponent
    Highlight the component with the given id.
    */
    void    HighlightComponent(
        1:  string      id
    ),

    /**
    UnhighlightComponent
    Unhighlight the component with the given id.
    */
    void    UnhighlightComponent(
        1:  string      id
    ),

    /**
    GetValidRelationships
    Get an object containing valid event and actions available on both the engine and components on screen
    */
    RelationshipContainer   GetValidRelationships(
    ),

    /**
    GetValidComponentRelationships
    Get an object containing valid event and actions available on a specified component name (eg. 'image')
    */
    RelationshipComponentContainer    GetValidComponentRelationships(
        1:  string      componentName
    ),

    /**
    GetAllValidComponentRelationships
    Get an object containing valid event and actions available on all loaded components
    */
    map<string-id,RelationshipComponentContainer>    GetAllValidComponentRelationships(
    ),

    /**
    ShowVisualRelationshipsEditor
    Shows the visual relationship editor of the engine
    */
    void    ShowVisualRelationshipsEditor(
    ),

    /**
    HideVisualRelationshipsEditor
    Hides the visual relationship editor of the engine
    */
    void    HideVisualRelationshipsEditor(
    ),

    /**
    ShowVisualRelationship
    Shows the visual relationship of a singular named relationship on screen in the editor
    */
    void    ShowVisualRelationship(
        1:  string      relationshipId
    ),

    /**
    HideVisualRelationship
    Hides the visual relationship of a singular named relationship on screen in the editor
    */
    void    HideVisualRelationship(
        1:  string      relationshipId
    ),

    /**
    SetRelationshipsData
    Sets the desired list of active event/action relationships into the current screen
    */
    void    SetRelationshipsData(
        1:  list<Relationship>     relationshipsData
    ),

    /**
    GetRelationshipsData
    Sets the list of active event/action relationships from the current screen
    */
    list<Relationship>    GetRelationshipsData(
    ),

    /**
    OnResourceManagerSelect
    A resource has been selected from the resource manager.
    */
    void    OnResourceManagerSelect(
        1:  string  filePathRelative
    ),

    /**
    OnResourceManagerClose
    The resource manager has been closed and no resource has been selected.
    */
    void    OnResourceManagerClose(
    ),

    /**
    OnRelationshipManagerSave
    The relationships manager has been closed, and the relationships sent back.
    */
    void    OnRelationshipManagerSave(
        1:  list<Relationship>     relationshipsData
    ),

    /**
    OnRelationshipManagerClose
    The relationship manager has been closed, and no relationships
    have been saved.
    */
    void    OnRelationshipManagerClose(
    ),

    /**
    OnEditDialogSave
    The edit dialog has been closed and saved.
    */
    void    OnEditDialogSave(
        1:  EditableForm    sForm
    ),

    /**
    OnEditDialogClose
    The edit dialog has been closed and no data has been saved.
    */
    void    OnEditDialogClose(
    )
}

/*
Not required by the product, these event id's can be used by the connector
to trigger events on any object with bindings to the connector service.
*/
enum EventsInbound {
    READY               = "READY",
    SCALE               = "SCALE",
    DATA_CONFIGURATION  = "DATA_CONFIGURATION",
    DATA_SCREEN         = "DATA_SCREEN",
    DRAW                = "DRAW",
    COLUMN_ADD          = "COLUMN_ADD",
    COLUMN_HIGHLIGHT    = "COLUMN_HIGHLIGHT",
    COLUMN_UNHIGHLIGHT  = "COLUMN_UNHIGHLIGHT",
    COMPONENT_ADD       = "COMPONENT_ADD"
}

/**
The outbound connector is the channel the courseware can communicate
outbound (externally) to Mosaic.
*/
service ConnectorOutbound {

    /**
    Ready
    When the product has received the outbound service via its inbound
    connector, it can inform the external service that it is ready to receive
    data by calling the Ready() method on the outbound connector.
    */
    void    Ready(),

    /**
    SetInboundService
    Used by Mosaic internally, this method allows the outbound service to be
    informed of the inbound service, in case it requires two way comms.
    */
    void    SetInboundService(
        1:   native-js-Object     InboundService
    ),

    /**
    SetScreenDataDirty
    Inform the external service that the screen data has been updated.
    This could additionally, for instance, prompt the save button in
    the external service to enable.
    */
    void    SetScreenDataDirty(
    ),

    /**
    SetContextInformation
    This allows for the product to send textual information to the
    external service regarding the current context. This can be used to
    send data relevant to what is happening, i.e. mouse co-ordinates or the
    name of the item we are hovering over.
    The external service does not have to action this method.
    */
    void    SetContextInformation(
        1:  Context     context,
        2:  string      text
    ),

    /**
    OpenResourceManager
    Open the resource manager inside the external service.
    It is also possible to send methods that will be called on select or
    cancel.
    */
    void    OpenResourceManager(
        1:              list<string>         fileExtensions
    ),

    /**
    OpenRelationshipManager
    Open the relationship manager inside the external service.
    It is possible to send methods that will be called on select or
    cancel.
    */
    void    OpenRelationshipManager(
        1:              EditableForm         editableForm
    ),

    /**
    OpenEditDialog
    Open an edit dialog inside the external service.
    An editable form is passed with the required field information to draw
    an editable form dialog.
    It is also possible to send methods that will be called on select or
    cancel.
    */
    void    OpenEditDialog(
        1:              EditableForm         editableForm
    )
}

/*
Not required by the product, these event id's can be used by the connector
to trigger events on any object with bindings to the connector service.
*/
enum EventsOutbound {
    READY   = "READY",
    MODE    = "MODE",
    CONTEXT = "CONTEXT",
    DIRTY   = "DIRTY"
}