namespace shrewd BuildEmpire.Mosaic.Courseware
namespace js Courseware
namespace php BuildEmpire\Mosaic\Courseware

/*
This allows the product to define a mode and thus behave
differently in said mode. This value may also be transferred to an
external service, who may also act differently dependant on the mode set.
*/
enum Mode {
    TEMPLATE_EDITOR = 1,
    SCREEN_EDITOR = 2,
    SCREEN_DISPLAY = 3
}

/*
This allows the product to declare a context type when returning
contextual data to the external service.
*/
enum Context {
    GENERAL = 1,
    POSITION = 2
}

struct Column {
    1:  string-id                          id,
    2:  integer                            x,
    3:  integer                            y,
    4:  integer                            width,
    5:  integer                            height,
    6:  boolean                            display = true,
    7:  boolean                            structure = true
}

struct Translation {
    1:  optional    string-id       id,
    2:              boolean         base = false,
    3:              string          name,
    4:              string          value
}

struct LearningPath {
    1:  optional    string-id       id,
    2:              boolean         base = false,
    3:              string          name
}

struct Template {
    1:  string                name,
    2:  list<Column>          columns
}

enum LearningPathFulfilmentType {
    NONE = 1,
    CHILDREN = 2,
    ALL = 3,
}

struct Screen {
    1:  integer                            width,
    2:  integer                            height
}

struct Component {
    1:  string                             name,
    2:  string                             title,
    3:  integer                            active = 1
}


struct ComponentData {
    1:  string-id                           id,
    2:  string                              name,
    3:  list                                data
}

struct ConfigurationData {
    1:              string-id             id,
    2:              string                name,
    3:  optional    Screen                screen,
    4:  optional    list<Translation>     translations,
    5:  optional    list<LearningPath>    learningPaths,
    6:  optional    list<Template>        templates,
    7:  optional    list<Component>       components,
    8:  optional    list<string>          errors
}

struct ScreenData {
    1:  optional    Template               template,
    2:  optional    list<ComponentData>    components
}

enum StructureItemType {
    PROJECT = 1,
    FOLDER = 2,
    SCREEN = 3,
}

struct StructureItem {
    1:              string-id                           id,
    2:              string-id                           alias,
    3:              StructureItemType                   type,
    4:              string                              title,
    5:              boolean                             populated,
    6:  optional    list<StructureItem>                 children,
    7:  optional    map<string-id,StructureItemType>    learningPathIds,
    8:  optional    ScreenData                          screenData
}

enum EditableFormFieldType {
    TEXT = 1,
    PASSWORD = 2,
    HTML = 3,
    SELECT = 4,
    CHECKBOX = 5,
    RADIO = 6
}

struct EditableFormFieldHTML {
    1: string                 cssPath,
    2: list                   styleFormats,
}

struct EditableFormField {
    1:              EditableFormFieldType  type,
    2:              string                 name,
    3:              string                 title,
    4:              boolean                required,
    5: optional     string                 value,
    6: optional     native-js-Object       data
}

struct EditableFormGroup {
    1: string                      name,
    2: list<EditableFormField>     fields
}

struct EditableForm {
    1: string                      name,
    2: list<EditableFormGroup>     groups
}


service ConnectorInbound {

    /**
    Ready
    When the external service has received the inbound service
    successfully, it may let the inbound service know by calling Ready().
    It will also pass an outbound service for which the courseware can
    communicate to the external service with.
    The inbound service is achieved by the declaration of a variable named
    InboundService on the root of the javascript page, which must be defined
    before page load completion.
    */
    void    Ready(
        1:   native-js-Object     OutboundService
    ),

    /**
    SetScale
    Set the scale decimal, if required.
    1 = No Scale, 0.5 = 50%.
    */
    void    SetScale(
        1:   float    scale
    ),

    /**
    SetConfigurationData
    Set the configuration data object for the courseware.
    This must be done before a Draw() call.
    */
    void    SetConfigurationData(
        1:   ConfigurationData     configurationData
    ),

    /**
    SetScreenData
    This returns a jQuery.Deferred promise object, which will be resolved
    on load of all the component contained within the screen data.
    When the call is resolved, you may call Draw().
    */
    native-js-jQuery    SetScreenData(
        1:   ScreenData     screenData
    ),

    /**
    GetScreenData
    Retrieve the current screen data.
    This may be after an amendment has been made by the course editor.
    */
    ScreenData    GetScreenData(),

    /**
    Draw
    Draw the screen, using the configuration and screen data set.
    This may be called numerous times per load.
    */
    void    Draw(),

    /**
    AddColumn
    Add a column to the current template.
    This may be within the template editor, or to the current screen template.
    This may or may not be supported by the editor.
    No re-draw is required.
    */
    Column    AddColumn(
    ),

    /**
    AddComponent
    Add a component of the component name type to the screen.
    This may or may not be supported by the editor.
    No re-draw is required.
    */
    void    AddComponent(
        1:   string          componentName
    ),

}

/**
The outbound connector is the channel the courseware can communicate
outbound (externally) to Mosaic.
*/
service ConnectorOutbound {

    /**
    Ready
    When the product has received the outbound service via its inbound
    connector, it can inform the external service that it is ready to receive
    data by calling the Ready() method on the outbound connector.
    */
    void    Ready(),

    /**
    SetMode
    Set the mode that the product is operating in.
    This helps the external service to tailor its interface around
    the mode.
    */
    void    SetMode(
        1:  Mode     mode
    ),

    /**
    SetDirty
    Inform the external service of the dirty state (edited).
    If true, the content has been edited (is dirty).
    This may, for instance, prompt the save button in the external
    service to enable.
    */
    void    SetDirty(
        1:  boolean     dirtyState
    ),

    /**
    SetContextInformation
    This allows for the product to send textual information to the
    external service regarding the current context. This can be used to
    send data relevant to what is happening, i.e. mouse co-ordinates or the
    name of the item we are hovering over.
    The external service does not have to action this method.
    */
    void    SetContextInformation(
        1:  Context     context,
        2:  string      text
    ),

    /**
    OpenResourceManager
    Open the resource manager inside the external service.
    It is also possible to send methods that will be called on select or
    cancel.
    */
    void    OpenResourceManager(
        1:              list<string>         fileExtensions,
        2:   optional   native-js-Object     onSelectCallback,
        3:   optional   native-js-Object     onCancelCallback
    ),

    /**
    OpenEditDialog
    Open an edit dialog inside the external service.
    An editable form is passed with teh required field information to draw
    an editable form dialog.
    It is also possible to send methods that will be called on select or
    cancel.
    */
    void    OpenEditDialog(
        1:              EditableForm         editableForm,
        2:   optional   native-js-Object     onSaveCallback,
        3:   optional   native-js-Object     onCancelCallback
    )

}

/*
Not required by the product, these event id's can be used by the connector
to trigger events on any object with bindings to the connector service.
*/
enum EventsOutbound {
    READY = "READY",
    MODE = "MODE",
    DIRTY = "DIRTY",
    CONTEXT = "CONTEXT"
}